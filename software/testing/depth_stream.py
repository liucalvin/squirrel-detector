import pyrealsense2 as rs
import numpy as np
import cv2
from flask import Flask, Response
from utils.fluid_velocity_calculator import exit_velocity, find_launch_angle

# Initialize Flask app
app = Flask(__name__)

# Configure RealSense pipeline
pipeline = rs.pipeline()
config = rs.config()
config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)

# Start streaming
pipeline.start(config)

EXIT_PRESSURE = 100 # psi
NOZZLE_HEIGHT = 0.2 # meters above ground

def generate_frames():
    try:
        while True:
            # Wait for a coherent pair of frames: depth
            frames = pipeline.wait_for_frames()
            depth_frame = frames.get_depth_frame()
            if not depth_frame:
                continue

            # Convert depth frame to numpy array
            depth_image = np.asanyarray(depth_frame.get_data())

            # Get the center depth value
            height, width = depth_image.shape
            center_x = width // 2
            center_y = height // 2
            center_depth = depth_image[center_y, center_x]/1000.0  # Depth in meters

            # Apply colormap for visualization
            depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_image, alpha=0.03), cv2.COLORMAP_JET)

            # get fluid calculations
            v0 = exit_velocity(EXIT_PRESSURE)
            theta = find_launch_angle(v0, NOZZLE_HEIGHT, center_depth)

            # Overlay the center depth value on the image
            size = 4
            cv2.circle(depth_colormap, (center_x, center_y), radius=size+2, color=(0, 0, 0), thickness=-1)
            cv2.line(depth_colormap, (center_x - size, center_y - size), (center_x + size, center_y + size), (255, 255, 255), 2)
            cv2.line(depth_colormap, (center_x + size, center_y - size), (center_x - size, center_y + size), (255, 255, 255), 2)
            cv2.putText(depth_colormap, f"Center Depth: {round(center_depth, 1)} m", (20, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2, cv2.LINE_AA)
            cv2.putText(depth_colormap, f"Nozzle Angle: {round(theta, 1)} deg", (20, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2, cv2.LINE_AA)

            # Encode the frame to JPEG
            ret, buffer = cv2.imencode('.jpg', depth_colormap)
            frame = buffer.tobytes()

            # Yield the frame in byte format
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
    finally:
        # Stop streaming
        pipeline.stop()

@app.route('/video_feed')
def video_feed():
    # Return the response generated by the generate_frames function
    return Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/')
def index():
    # HTML page to display the video stream
    return """
    <html>
      <head>
        <title>RealSense Depth Stream</title>
      </head>
      <body>
        <h1>RealSense Depth Stream</h1>
        <img src="/video_feed" width="640" height="480">
      </body>
    </html>
    """

if __name__ == '__main__':
    # Run the Flask app
    app.run(host='0.0.0.0', port=5000)
